#!/bin/bash

PlistBuddy="/usr/libexec/PlistBuddy"
realpath="/usr/local/bin/realpath"

SCRIPT_PATH=$($realpath "$0")
JOBS_DIR=/usr/local/var/launchd-oneshot/jobs
LOGS_DIR=/usr/local/var/log/launchd-oneshot


usage()
{
    echo "Usage: launchd-oneshot /path/to/job [--on-boot | --on-login | --on-login-as-root]"
}

job_for_path()
{
    declare job_path=$1
    basename "$job_path" | tr ' ' '-'
}

id_for_job()
{
    declare job=$1
    echo "com.cybertk.launchd-oneshot.$job"
}

cleanup_job()
{
    echo ""
}

cleanup_trigger_for_job()
{
    echo ""
}

run_job()
{
    declare job=$1 run_as=$2
    local job_id launchd_agent trigger_options

    job_id=$(id_for_job "$job")
    launchd_agent="/Library/LaunchDaemons/$job_id.plist"
    trigger_options="/tmp/$job_id.trigger.options"

    # Source job options if exists
    declare login_user=root
		# shellcheck source=/dev/null
    [[ -f "$trigger_options" ]] && . "$trigger_options"

    su "${run_as:-$login_user}" -c "eval '$JOBS_DIR/$job $login_user'"
    rc=$?

    if [[ "$rc" -eq 0 ]]; then
        # Job is complete, cleanup
        [[ -f "$trigger_options" ]] && cleanup_trigger_for_job "$job_id"
        cleanup_job "$job"
        echo "Never reached here"
    fi

    exit "$rc"
}

install_agent_for_job()
{
    declare job_path=$1 should_watch_trigger=$2 run_as_root=$3
		local job job_id agent_plist log

    job=$(job_for_path "$job_path")
    job_id=$(id_for_job "$job")
    agent_plist="/Library/LaunchDaemons/$job_id.plist"
    log="$LOGS_DIR/$job.log"

    # Install launchd agents
    $PlistBuddy -c 'Add :Label string '"$job_id" "$agent_plist"
    $PlistBuddy -c 'Add :ProgramArguments array' "$agent_plist"
    $PlistBuddy -c 'Add :ProgramArguments:0 string '"$SCRIPT_PATH" "$agent_plist"
    $PlistBuddy -c 'Add :ProgramArguments:1 string '"$job" "$agent_plist"
    $PlistBuddy -c 'Add :EnvironmentVariables dict' "$agent_plist"
    $PlistBuddy -c 'Add :EnvironmentVariables:LAUNCHD_ONESHOT_RUN_JOB string 1' "$agent_plist"
    $PlistBuddy -c 'Add :KeepAlive dict' "$agent_plist"
    $PlistBuddy -c 'Add :StandardOutPath string '"$log" "$agent_plist"
    $PlistBuddy -c 'Add :StandardErrorPath string '"$log" "$agent_plist"
    if [[ -n "$should_watch_trigger" ]]; then
        watched_job_id="$job_id.trigger"
        $PlistBuddy -c 'Add :RunAtLoad bool false' "$agent_plist"
        $PlistBuddy -c 'Add :KeepAlive:OtherJobEnabled dict' "$agent_plist"
        $PlistBuddy -c 'Add :KeepAlive:OtherJobEnabled:'"${watched_job_id}"' bool true' "$agent_plist"
        $PlistBuddy -c 'Add :WatchPaths array' "$agent_plist"
        $PlistBuddy -c 'Add :WatchPaths:0 string '"/tmp/$job_id.trigger.options" "$agent_plist"
    else
        $PlistBuddy -c 'Add :KeepAlive:SuccessfulExit bool false' "$agent_plist"
        $PlistBuddy -c 'Add :RunAtLoad bool true' "$agent_plist"
    fi

    if [[ -n "$run_as_root" ]]; then
        $PlistBuddy -c 'Add :EnvironmentVariables:LAUNCHD_ONESHOT_RUN_JOB_AS_ROOT string 1' "$agent_plist"
    fi
    chmod 644 "$agent_plist"

    # Install jobs to JOBS_DIR
    cp "$job_path" "$JOBS_DIR/$job"

    echo "Installed launchd agent to $agent_plist"
    echo "Installed job to $JOBS_DIR/$job"
}

install_trigger_for_job()
{
    declare origin_job_path=$1
    local origin_job job job_id agent_plist log

    origin_job=$(job_for_path "$origin_job_path")
    job=$origin_job.trigger
    job_id=$(id_for_job "$job")
    agent_plist="/Library/LaunchAgents/$job_id.plist"
    log="$LOGS_DIR/$origin_job.log"

    $PlistBuddy -c 'Add :Label string '"$job_id" "$agent_plist"
    $PlistBuddy -c 'Add :ProgramArguments array' "$agent_plist"
    $PlistBuddy -c 'Add :ProgramArguments:0 string '"$SCRIPT_PATH" "$agent_plist"
    $PlistBuddy -c 'Add :ProgramArguments:1 string '"$job" "$agent_plist"
    $PlistBuddy -c 'Add :EnvironmentVariables dict' "$agent_plist"
    $PlistBuddy -c 'Add :EnvironmentVariables:LAUNCHD_ONESHOT_RUN_TRIGGER string 1' "$agent_plist"
    $PlistBuddy -c 'Add :RunAtLoad bool true' "$agent_plist"
    $PlistBuddy -c 'Add :KeepAlive dict' "$agent_plist"
    $PlistBuddy -c 'Add :KeepAlive:SuccessfulExit bool false' "$agent_plist"
    chmod 644 "$agent_plist"
    echo "Installed trigger to $agent_plist"
}

install_job()
{
    declare job_path=$1 job_type=$2

    job_path=$($realpath "$job_path" 2>/dev/null) # realpath is installed by `brew install coreutils`
    job_type=${job_type:-"--on-boot"}

    if [[ -z "$job_path" ]]; then
        usage
        exit 0
    fi

    if [[ ! -x "$job_path" ]]; then
        echo "error: $job_path is not executable"
        echo
        usage
        exit 1
    fi

    if [[ "$(id -u)" != "0" ]]; then
       echo "error: This script must be run as root" 1>&2
       exit 1
    fi

    # Ensure jobs dir is exist
    mkdir -p "$JOBS_DIR" > /dev/null 2>&1
    mkdir -p "$LOGS_DIR" > /dev/null 2>&1

    if [[ "$job_type" = "--on-boot" ]]; then
        install_agent_for_job "$job_path"
    elif [[ "$job_type" = "--on-login" ]]; then
        install_trigger_for_job "$job_path"
        install_agent_for_job "$job_path" --watch-trigger
    elif [[ "$job_type" = "--on-login-as-root" ]]; then
        install_trigger_for_job "$job_path"
        install_agent_for_job "$job_path" --watch-trigger --run-as-root
    else
        echo "unkownn job type: $job_type"
        exit 1
    fi
}

main()
{
    declare arg1=$1 arg2=$2

    # local job_id=com.cybertk.launchd-oneshot.$(basename "$job" | tr ' ' '-')

    if [[ -n "$LAUNCHD_ONESHOT_RUN_TRIGGER" ]]; then
        local job_options_file

        job_options_file="/tmp/$(id_for_job "$arg1").options"
        echo "login_user=$(id -un)" > "$job_options_file"
    elif [[ -n "$LAUNCHD_ONESHOT_RUN_JOB" ]]; then
        local run_as

        [[ -n "$LAUNCHD_ONESHOT_RUN_JOB_AS_ROOT" ]] && run_as=root
        run_job "$arg1" "$run_as"
    else
        install_job "$arg1" "$arg2"
    fi

    exit "$?"
}

main "$@"
